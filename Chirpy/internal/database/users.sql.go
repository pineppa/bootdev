// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at,
email, hashed_password, token, refresh_token, is_chirpy_red)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4,
    FALSE
)
RETURNING id, created_at, updated_at, email, hashed_password, expires_sec, token, refresh_token, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword sql.NullString
	Token          sql.NullString
	RefreshToken   sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.Token,
		arg.RefreshToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.ExpiresSec,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, created_at, updated_at, email, hashed_password, expires_sec, token, refresh_token, is_chirpy_red FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.HashedPassword,
			&i.ExpiresSec,
			&i.Token,
			&i.RefreshToken,
			&i.IsChirpyRed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, email, hashed_password, expires_sec, token, refresh_token, is_chirpy_red FROM users WHERE LOWER(name) = LOWER($1)
`

func (q *Queries) GetUser(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.ExpiresSec,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password, expires_sec, token, refresh_token, is_chirpy_red FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.ExpiresSec,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, email, hashed_password, expires_sec, token, refresh_token, is_chirpy_red FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.ExpiresSec,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT id, created_at, updated_at, email, hashed_password, expires_sec, token, refresh_token, is_chirpy_red FROM users WHERE token = $1
`

func (q *Queries) GetUserByToken(ctx context.Context, token sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.ExpiresSec,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const setRefreshTokenByID = `-- name: SetRefreshTokenByID :exec
UPDATE users
SET refresh_token = $2 WHERE id = $1
`

type SetRefreshTokenByIDParams struct {
	ID           uuid.UUID
	RefreshToken sql.NullString
}

func (q *Queries) SetRefreshTokenByID(ctx context.Context, arg SetRefreshTokenByIDParams) error {
	_, err := q.db.ExecContext(ctx, setRefreshTokenByID, arg.ID, arg.RefreshToken)
	return err
}

const setTokenByID = `-- name: SetTokenByID :exec
UPDATE users
SET token = $2 WHERE id = $1
`

type SetTokenByIDParams struct {
	ID    uuid.UUID
	Token sql.NullString
}

func (q *Queries) SetTokenByID(ctx context.Context, arg SetTokenByIDParams) error {
	_, err := q.db.ExecContext(ctx, setTokenByID, arg.ID, arg.Token)
	return err
}

const updateEmailPassword = `-- name: UpdateEmailPassword :exec
UPDATE users
SET email = $1, hashed_password = $2
WHERE token = $3
`

type UpdateEmailPasswordParams struct {
	Email          string
	HashedPassword sql.NullString
	Token          sql.NullString
}

func (q *Queries) UpdateEmailPassword(ctx context.Context, arg UpdateEmailPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailPassword, arg.Email, arg.HashedPassword, arg.Token)
	return err
}

const updateRedStatus = `-- name: UpdateRedStatus :exec
UPDATE users
SET is_chirpy_red = $1 WHERE id = $2
`

type UpdateRedStatusParams struct {
	IsChirpyRed bool
	ID          uuid.UUID
}

func (q *Queries) UpdateRedStatus(ctx context.Context, arg UpdateRedStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateRedStatus, arg.IsChirpyRed, arg.ID)
	return err
}
