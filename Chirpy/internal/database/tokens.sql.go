// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
INSERT INTO refresh_tokens (
    token, created_at, updated_at, 
    user_id, expired_at, revoked_at, expires)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    NULL,
    NULL,
    NOW() + INTERVAL '60 day'
)
RETURNING token, created_at, updated_at, user_id, expired_at, revoked_at, expires
`

type CreateTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiredAt,
		&i.RevokedAt,
		&i.Expires,
	)
	return i, err
}

const deleteAllTokens = `-- name: DeleteAllTokens :exec
DELETE FROM refresh_tokens
`

func (q *Queries) DeleteAllTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTokens)
	return err
}

const getAllTokens = `-- name: GetAllTokens :many
SELECT token, created_at, updated_at, user_id, expired_at, revoked_at, expires FROM refresh_tokens
`

func (q *Queries) GetAllTokens(ctx context.Context) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getAllTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ExpiredAt,
			&i.RevokedAt,
			&i.Expires,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokenByToken = `-- name: GetTokenByToken :one
SELECT token, created_at, updated_at, user_id, expired_at, revoked_at, expires FROM refresh_tokens WHERE token = $1
`

func (q *Queries) GetTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiredAt,
		&i.RevokedAt,
		&i.Expires,
	)
	return i, err
}

const getTokenByUserId = `-- name: GetTokenByUserId :one
SELECT token, created_at, updated_at, user_id, expired_at, revoked_at, expires FROM refresh_tokens WHERE user_id = $1
`

func (q *Queries) GetTokenByUserId(ctx context.Context, userID uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUserId, userID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiredAt,
		&i.RevokedAt,
		&i.Expires,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens
SET expired_at = NOW(), expires = NOW(), revoked_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeToken, token)
	return err
}
